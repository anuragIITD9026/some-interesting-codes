int getheight(Node* root)
{
    if(!root)
    {
        return 0;
    }
    return root->height;
}
int getbalance(Node* root)
{
    if(!root)
    {
        return 0;
    }
    return getheight(root->left)-getheight(root->right);
}
Node* rightrotation(Node* root)
{
Node *child=root->left;
Node *childright=child->right;
child->right=root;
root->left=childright;
root->height=1+max(getheight(root->left),getheight(root->right));
child->height=1+max(getheight(child->left),getheight(child->right));
return child;
}
Node* leftrotation(Node* root)
{
Node *child=root->right;
Node *childleft=child->left;
child->left=root;
root->right=childleft;
root->height=1+max(getheight(root->left),getheight(root->right));
child->height=1+max(getheight(child->left),getheight(child->right));
return child;
}
int mininorder(Node* root)
{
    if(!root->left)
    {
        return root->data;
    }
    else{
        return mininorder(root->left);
    }
}
Node* deleteNode(Node* root, int key)
{
    //add code here,
     if(!root)
    {
        return nullptr;
    }
    if(root->data==key)
    {
    if(!root->left&&!root->right)
    {
        delete root;
        return nullptr;
    }
    else if(!root->left)
    {
        Node* temp=root->right;
        delete root;
        return temp;
    }
    else if(!root->right)
    {
        Node* temp=root->left;
        delete root;
        return temp;
    }
    else
    {
        Node* curr=root->right;
        while(curr->left)
        {
            curr=curr->left;
        }
        root->data=curr->data;
        root->right=deleteNode(root->right,root->data);
    }
}
else if(root->data<key)
{
    root->right=deleteNode(root->right,key);
}
else{
    root->left=deleteNode(root->left,key);
}
int data=key;
root->height=1+max(getheight(root->left),getheight(root->right));
    int balance=getbalance(root);
    //left left case
    if(balance>1)
    {
        if(getbalance(root->left)>=0)
        {
        return rightrotation(root);
        }
        else
        {
        root->left=leftrotation(root->left);
        return rightrotation(root);
    }
    }
    
    // right right case
    else if(balance<-1)
    {
        if(getbalance(root->right)<=0)
        {
        return leftrotation(root);
        }
        else
        {
        root->right=rightrotation(root->right);
        return leftrotation(root);
}
    }
    else{
        return root;
    }


}
