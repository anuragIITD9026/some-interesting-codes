#include<bits/stdc++.h>
using namespace std;
class node{
    public:
    int data,height;
    node *left,*right;
    node(int value){
        data=value;
        left=right=nullptr;
        height=1;
    }
};
int getheight(node* root)
{
    if(!root)
    {
        return 0;
    }
    return root->height;
}
int getbalance(node* root)
{
    return getheight(root->left)-getheight(root->right);
}
node* rightrotation(node* root)
{
node *child=root->left;
node *childright=child->right;
child->right=root;
root->left=childright;
root->height=1+max(getheight(root->left),getheight(root->right));
child->height=1+max(getheight(child->left),getheight(child->right));
return child;
}
node* leftrotation(node* root)
{
node *child=root->right;
node *childleft=child->left;
child->left=root;
root->right=childleft;
root->height=1+max(getheight(root->left),getheight(root->right));
child->height=1+max(getheight(child->left),getheight(child->right));
return child;
}
node* insert(node* root,int data)
{
    if(!root)
    {
        return new node(data);
    }
    if(data<root->data)
    {
        root->left=insert(root->left,data);
    }
    else if(data>root->data)
    {
        root->right=insert(root->right,data);
    }
    else{
        return root;
    }
    root->height=1+max(getheight(root->left),getheight(root->right));
    int balance=getbalance(root);
    //left left case
    if(balance>1&&root->left->data>data)
    {
        return rightrotation(root);
    }
    // left right case
    else if(balance>1&&root->left->data<data)
    {
        root->left=leftrotation(root->left);
        return rightrotation(root);
    }
    
    
    // right right case
    else if(balance<-1&&root->right->data<data)
    {
        return leftrotation(root);
    }
    // right left case
    else if(balance<-1&&root->right->data>data)
    {
        root->right=rightrotation(root->right);
        return leftrotation(root);

    }
    else{
        return root;
    }

}
void preorder(node* root)
{
    if(!root)
    {
        return;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    
    preorder(root->right);
}
int mininorder(node* root)
{
    if(!root->left)
    {
        return root->data;
    }
    else{
        return mininorder(root->left);
    }
}
node* deletenode(node* root,int key)
{
    if(!root)
    {
        return nullptr;
    }
    if(root->data==key)
    {
    if(!root->left&&!root->right)
    {
        return nullptr;
    }
    else if(!root->left)
    {
        return root->right;
    }
    else if(!root->right)
    {
        return root->left;
    }
    else
    {
        root->data=mininorder(root->right);
        deletenode(root->right,root->data);
    }
}
else if(root->data<key)
{
    root->right=deletenode(root->right,key);
}
else{
    root->left=deletenode(root->left,key);
}
int data=key;
root->height=1+max(getheight(root->left),getheight(root->right));
    int balance=getbalance(root);
    //left left case
    if(balance>1&&root->left->data>data)
    {
        return rightrotation(root);
    }
    // left right case
    else if(balance>1&&root->left->data<data)
    {
        root->left=leftrotation(root->left);
        return rightrotation(root);
    }
    
    
    // right right case
    else if(balance<-1&&root->right->data<data)
    {
        return leftrotation(root);
    }
    // right left case
    else if(balance<-1&&root->right->data>data)
    {
        root->right=rightrotation(root->right);
        return leftrotation(root);

    }
    else{
        return root;
    }


}
int main()
{
node *root=nullptr;

root=insert(root,10);
root=insert(root,20);
root=insert(root,30);
root=insert(root,50);
root=insert(root,70);
root=insert(root,5);
root=insert(root,100);
root=insert(root,95);
preorder(root);
cout<<endl;
root=deletenode(root,100);
preorder(root);
// root=insert(root,10);
// root=insert(root,10);

}
